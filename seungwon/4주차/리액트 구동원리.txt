리액트는 자바스크립트 라이브러리다.

상태값이 변경되거나 부모가 재렌더링 할때마다 UI를 자동으로 업데이트 해주는 JS라이브러리다.

이때 업데이트를 가상 DOM을 사용해 변경된 부분만을 업데이트 해주는 구조를 사용한다.

이때 가상돔이란 실제 DOM이아닌 가상의 환경에 DOM을 생성하는것이고, 리액트는 이곳의 변경을 통해 실제 DOM에 변경된 부분만 업데이트하는것이다.

리액트는 2가지 단계를 통해서 렌더링를 진행하는데, 첫번째는 렌더 두번째는 커밋 단계이다.

 렌더 단게는  화면에 그릴 것을 파악하는 단계이고 커밋단계는 파악한 것들을 적용 하는 단계이다.

 리액트가 렌더링 할 경우는 크게 2가지인데 
  1) 사용자가 페이지에 처음 방문했을때 > 초기렌더 
  2) 상태가 업데이트 되었을때 > 리렌더

이때 초기 단계의 랜더에서는 render()메서드의 루트 컴포넌트를 호출한다
리렌더에서의 렌더는 상태 업데이트가 발생한 컴포넌트를 호출한다. 

커밋단계 또한 크게 2가지로 나누어 보면
  1) 초기 렌더 에서의 커밋
  2) 리렌더에서의 커밋
이때 초기 렌더에서의 커밋은 랜더 단계에서 파악한 DOM 노드를 실제 DOM에 반영한다.
리렌더에서의 커밋은 렌더간 발생한 변경사항 (가상DOM에서의 변경사항)을 DOM에 반영한다.
이때 적용하는 것은 DOM노드를 CRUD하여 새로운 컴포넌트 트리와 동기화 하는 과정이다. 즉, DOM 조작이 발생하면 변경된 노드만 파악하여 변경한다는것.

리액트의 장단점에 대해 이야기 하기 전에 특징에 대해 먼저 알아보자.

리액트는 선언적이다. 
  이는 리액트가 대화형 UI를 작성하기에 유리하다는 것으로, 데이터가 변경되었을때 효율적인 렌더링을 수행할 수 있게 한다.
  선언적 프로그래밍이라는 것은 어떻게 보다 무엇을 나타내야 하는지를 보여주는 것으로 가독성과 유지보수 측면에서 좋다.
  또한 변수의 사용량이 줄어들고 이로인해 코드를 읽을때 예측 가능하고 디버깅이 쉽다.
  선언적 프로그래밍인 리액트는 내부적인 구현을 다르게 만들어 웹, react-Native에서도 사용가능하다 즉, 이는 재사용되기 쉽다는 것이다.

리액트는 다른 프레임워크나 라이브러리와도 병행하여 사용할 수 있다.
  이는 리액트가 이미 개발이 완료된 프로젝트에서도 적용할 수 있는 확장성을 의미한다.

그렇다면 단점에는 무엇이 있을까.
리액트는 로딩시간이 길고, 데이터 모델링, 라우팅등의 기능 지원이 되지 않는다는 단점이 있다.