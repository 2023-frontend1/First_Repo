9. 배열의 고차함수는 어느 순간에 사용하는 것이 적절할까요


const users = [
    {id: 1, name: "pedro", age: 26 },
    {id: 2, name: "john", age: 22 },
    {id: 3, name: "jessica", age: 56 },
    {id: 4, name: "rio ferdinand", age: 126},
    {id: 5, name: "michael scott", age: 45}
];


=> filter: filters out the items you dont want and creates a new array of items you wanted.

Ex) Using filter() we're going to remove the user named "Pedro" 

const removeUser = (name) => { 
/* using an arrow function we named 'removeUser' 
we have a parameter 'name' which we can add an argument of who we want to remove*/

	const newUserArray = users.filter((user) => {
/* creating a new array we will use the filter() method to filter out the name we don't want 
as our object property */

		return user.name != name 
    // return all the user names that are not equal to the name I passed in the function parameter 
		})
	return newUserArray;
    // return newUserArray to removeUser function 
};

removeUser("pedro");

expected output: 
//{id: 2, name: "john", age: 22 },
//{id: 3, name: "jessica", age: 56 },
//{id: 4, name: "rio ferdinand", age: 126},
//{id: 5, name: "michael scott", age: 45}

-----------------------------------------------------------------------------------------------

reduce: allows you to reduce down an array into a singular value which is typically not an array but instead things like a number or a string

const array = [1, 5, 6, 4, 23, 4, 5, 2, 4]; 
//when using reduce() you need 2 values and an initial value 

const sum = array.reduce((sum, number) => { 
// sum being a accumulative value (represents all the numbers as a whole) and number representing each element in the existing array 
	return sum + number 
}, 0) //initial value is like the starting point 

console.log(sum); //54

-----------------------------------------------------------------------------------------------

sort: sorts out a list of items in an array into order

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();
fruit.reverse();

expected output:
["Apple", "Banana", "Mango", "Orange"]
-----------------------------------------------------------------------------------------------

findIndex: returns index of the first array element that satisfies the the provided test function; else it returns -1


let days = ["Sunday", "Wednesday", "Tuesday", "Friday"];

let index = days.findIndex((day) => day === "Wednesday"); //arrow function
// returns the first index of 'Wednesday' in the array

console.log(index); // 1

-----------------------------------------------------------------------------------------------

find: is like filter except it only returns a single element and when nothing is found it returns 'undefined' 

Ex)
const trees = [ 
  "birch", 
  "maple", 
  "oak"
];

const result = trees.find(function(tree) {
  return tree.startsWith("m");
});

// "maple"